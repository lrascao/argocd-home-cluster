apiVersion: v1
kind: ConfigMap
metadata:
  namespace: mqtt
  name: mqtt
data:
  mosquitto.conf: |
    # Config file for mosquitto
    #
    # See mosquitto.conf(5) for more information.
    #
    # Default values are shown, uncomment to change.
    #
    # Use the # character to indicate a comment, but only if it is the
    # very first character on the line.

    # =================================================================
    # General configuration
    # =================================================================
    #
    # Port to use for the default listener.
    port 1883

    # Choose the protocol to use when listening.
    # This can be either mqtt or websockets.
    # Websockets support is currently disabled by default at compile time.
    # Certificate based TLS may be used with websockets, except that
    # only the cafile, certfile, keyfile and ciphers options are supported.
    protocol mqtt

    # =================================================================
    # Websockets listener
    # =================================================================
    listener 9001
    protocol websockets

    # =================================================================
    # Logging
    # =================================================================
    # Places to log to. Use multiple log_dest lines for multiple
    # logging destinations.
    # Possible destinations are: stdout stderr syslog topic file
    #
    # stdout and stderr log to the console on the named output.
    #
    # syslog uses the userspace syslog facility which usually ends up
    # in /var/log/messages or similar.
    #
    # topic logs to the broker topic '$SYS/broker/log/<severity>',
    # where severity is one of D, E, W, N, I, M which are debug, error,
    # warning, notice, information and message. Message type severity is used by
    # the subscribe/unsubscribe log_types and publishes log messages to
    # $SYS/broker/log/M/susbcribe or $SYS/broker/log/M/unsubscribe.
    #
    # The file destination requires an additional parameter which is the file to be
    # logged to, e.g. "log_dest file /var/log/mosquitto.log". The file will be
    # closed and reopened when the broker receives a HUP signal. Only a single file
    # destination may be configured.
    #
    # Note that if the broker is running as a Windows service it will default to
    # "log_dest none" and neither stdout nor stderr logging is available.
    # Use "log_dest none" if you wish to disable logging.
    #
    # Types of messages to log. Use multiple log_type lines for logging
    # multiple types of messages.
    # Possible types are: debug, error, warning, notice, information,
    # none, subscribe, unsubscribe, websockets, all.
    # Note that debug type messages are for decoding the incoming/outgoing
    # network packets. They are not logged in "topics".
    log_type all

    # =================================================================
    # Security
    # =================================================================
    
    # Boolean value that determines whether clients that connect
    # without providing a username are allowed to connect. If set to
    # false then a password file should be created (see the
    # password_file option) to control authenticated client access.
    # Defaults to true.
    allow_anonymous true

    # =================================================================
    # Bridges
    # =================================================================

    # A bridge is a way of connecting multiple MQTT brokers together.
    # Create a new bridge using the "connection" option as described below. Set
    # options for the bridges using the remaining parameters. You must specify the
    # address and at least one topic to subscribe to.
    # Each connection must have a unique name.
    # The address line may have multiple host address and ports specified. See
    # below in the round_robin description for more details on bridge behaviour if
    # multiple addresses are used.
    # The direction that the topic will be shared can be chosen by
    # specifying out, in or both, where the default value is out.
    # The QoS level of the bridged communication can be specified with the next
    # topic option. The default QoS level is 0, to change the QoS the topic
    # direction must also be given.
    # The local and remote prefix options allow a topic to be remapped when it is
    # bridged to/from the remote broker. This provides the ability to place a topic
    # tree in an appropriate location.
    # For more details see the mosquitto.conf man page.
    # Multiple topics can be specified per connection, but be careful
    # not to create any loops.
    # If you are using bridges with cleansession set to false (the default), then
    # you may get unexpected behaviour from incoming topics if you change what
    # topics you are subscribing to. This is because the remote broker keeps the
    # subscription for the old topic. If you have this problem, connect your bridge
    # with cleansession set to true, then reconnect with cleansession set to false
    # as normal.
    connection awsiot
    address a2q2zbcwqz2k54.iot.eu-west-1.amazonaws.com:8883

    # Set the version of the MQTT protocol to use with for this bridge. Can be one
    # of mqttv31 or mqttv311. Defaults to mqttv31.
    bridge_protocol_version mqttv311

    # Set the client id to use on the remote end of this bridge connection. If not
    # defined, this defaults to 'name.hostname' where name is the connection name
    # and hostname is the hostname of this computer.
    # This replaces the old "clientid" option to avoid confusion. "clientid"
    # remains valid for the time being.
    remote_clientid mosquittobroker

    # Set the clientid to use on the local broker. If not defined, this defaults to
    # 'local.<clientid>'. If you are bridging a broker to itself, it is important
    # that local_clientid and clientid do not match.
    local_clientid bridgeawsiot

    # Set the clean session variable for this bridge.
    # When set to true, when the bridge disconnects for any reason, all
    # messages and subscriptions will be cleaned up on the remote
    # broker. Note that with cleansession set to true, there may be a
    # significant amount of retained messages sent when the bridge
    # reconnects after losing its connection.
    # When set to false, the subscriptions and messages are kept on the
    # remote broker, and delivered when the bridge reconnects.
    cleansession true

    # If set to true, publish notification messages to the local and remote brokers
    # giving information about the state of the bridge connection. Retained
    # messages are published to the topic $SYS/broker/connection/<clientid>/state
    # unless the notification_topic option is used.
    # If the message is 1 then the connection is active, or 0 if the connection has
    # failed.
    notifications false

    # Set the keepalive interval for this bridge connection, in
    # seconds.
    keepalive_interval 30

    # "automatic" is the default start type and means that the bridge connection
    # will be started automatically when the broker starts and also restarted
    # after a short delay (30 seconds) if the connection fails.
    #
    # Bridges using the "lazy" start type will be started automatically when the
    # number of queued messages exceeds the number set with the "threshold"
    # parameter. It will be stopped automatically after the time set by the
    # "idle_timeout" parameter. Use this start type if you wish the connection to
    # only be active when it is needed.
    #
    # A bridge using the "once" start type will be started automatically when the
    # broker starts but will not be restarted if the connection fails.
    start_type automatic

    # If try_private is set to true, the bridge will attempt to indicate to the
    # remote broker that it is a bridge not an ordinary client. If successful, this
    # means that loop detection will be more effective and that retained messages
    # will be propagated correctly. Not all brokers support this feature so it may
    # be necessary to set try_private to false if your bridge does not connect
    # properly.
    try_private true

    topic $aws/things/# both 0

    # -----------------------------------------------------------------
    # Certificate based SSL/TLS support
    # -----------------------------------------------------------------
    # Either bridge_cafile or bridge_capath must be defined to enable TLS support
    # for this bridge.
    # bridge_cafile defines the path to a file containing the
    # Certificate Authority certificates that have signed the remote broker
    # certificate.
    # bridge_capath defines a directory that will be searched for files containing
    # the CA certificates. For bridge_capath to work correctly, the certificate
    # files must have ".crt" as the file ending and you must run "c_rehash <path to
    # capath>" each time you add/remove a certificate.
    bridge_cafile /mosquitto/certs/ca.crt

    # Path to the PEM encoded client certificate, if required by the remote broker.
    bridge_certfile /mosquitto/certs/eu-west-1.mosquitto.certificate.crt

    # Path to the PEM encoded client private key, if required by the remote broker.
    bridge_keyfile /mosquitto/certs/eu-west-1.mosquitto.private.key

    # When using certificate based encryption, bridge_insecure disables
    # verification of the server hostname in the server certificate. This can be
    # useful when testing initial server configurations, but makes it possible for
    # a malicious third party to impersonate your server through DNS spoofing, for
    # example. Use this option in testing only. If you need to resort to using this
    # option in a production environment, your setup is at fault and there is no
    # point using encryption.
    bridge_insecure false
